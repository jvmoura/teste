/* Generated By:JavaCC: Do not edit this line. MiniJava.java */
import syntaxtree.*;

public class MiniJava implements MiniJavaConstants {
    public static void main(String[] args) throws ParseException {
        MiniJava parser = new MiniJava(System.in);
        parser.Goal();
        System.out.println("Lexical analysis successful.");
    }

  static final public Program Goal() throws ParseException, ParseException {
    MainClass mainClass;
    ClassDeclList classDeclList = new ClassDeclList();
    ClassDecl classDecl;
    mainClass = MainClass();
    label_1:
    while (true) {
      if (jj_2_1(5)) {
        ;
      } else {
        break label_1;
      }
      classDecl = ClassDecl();
                                  classDeclList.addElement(classDecl);
    }
    jj_consume_token(0);
        {if (true) return new Program(mainClass, classDeclList);}
    throw new Error("Missing return statement in function");
  }

// MainClass: Represents the main class of the program.
// Contains the class name, main method parameter name, and the main method body
  static final public MainClass MainClass() throws ParseException {
    Identifier i1, i2;
    Statement s;
    jj_consume_token(CLASS);
    i1 = Identifier();
    jj_consume_token(LBRACE);
    jj_consume_token(PUBLIC);
    jj_consume_token(STATIC);
    jj_consume_token(VOID);
    jj_consume_token(MAIN);
    jj_consume_token(LPAREN);
    jj_consume_token(STRING);
    jj_consume_token(LBRACKET);
    jj_consume_token(RBRACKET);
    i2 = Identifier();
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    s = Statement();
    jj_consume_token(RBRACE);
    jj_consume_token(RBRACE);
        {if (true) return new MainClass(i1, i2, s);}
    throw new Error("Missing return statement in function");
  }

// ClassDecl: Represents a class declaration.
// Can be either a simple class or a class that extends another class
  static final public ClassDecl ClassDecl() throws ParseException {
    Identifier i;
    Identifier j = null;
    VarDeclList vl = new VarDeclList();
    MethodDeclList ml = new MethodDeclList();
    jj_consume_token(CLASS);
    i = Identifier();
    if (jj_2_2(5)) {
      jj_consume_token(EXTENDS);
      j = Identifier();
    } else {
      ;
    }
    jj_consume_token(LBRACE);
    if (jj_2_3(5)) {
      vl = VarDeclList();
    } else {
      ;
    }
    if (jj_2_4(5)) {
      ml = MethodDeclList();
    } else {
      ;
    }
    jj_consume_token(RBRACE);
        if (j == null) {
            {if (true) return new ClassDeclSimple(i, vl, ml);}
        } else {
            {if (true) return new ClassDeclExtends(i, j, vl, ml);}
        }
    throw new Error("Missing return statement in function");
  }

// VarDeclList: Represents a list of variable declarations in a class or method.
// Collects all variable declarations into a list
  static final public VarDeclList VarDeclList() throws ParseException {
    VarDeclList vl = new VarDeclList();
    VarDecl v;
    label_2:
    while (true) {
      v = VarDecl();
                        vl.addElement(v);
      if (jj_2_5(5)) {
        ;
      } else {
        break label_2;
      }
    }
        {if (true) return vl;}
    throw new Error("Missing return statement in function");
  }

// VarDecl: Represents a single variable declaration.
// Contains the variable's type and identifier
  static final public VarDecl VarDecl() throws ParseException {
    Type t;
    Identifier i;
    t = Type();
    i = Identifier();
    jj_consume_token(SEMI);
        {if (true) return new VarDecl(t, i);}
    throw new Error("Missing return statement in function");
  }

// MethodDeclList: Represents a list of method declarations in a class.
// Collects all method declarations into a list
  static final public MethodDeclList MethodDeclList() throws ParseException {
    MethodDeclList ml = new MethodDeclList();
    MethodDecl m;
    label_3:
    while (true) {
      m = MethodDecl();
                           ml.addElement(m);
      if (jj_2_6(5)) {
        ;
      } else {
        break label_3;
      }
    }
        {if (true) return ml;}
    throw new Error("Missing return statement in function");
  }

// MethodDecl: Represents a method declaration.
// Contains return type, method name, parameter list, local variables, statements, and return expression
  static final public MethodDecl MethodDecl() throws ParseException {
    Type t;
    Identifier i;
    FormalList fl;
    VarDeclList vl = new VarDeclList();
    StatementList sl = new StatementList();
    Exp e;
    jj_consume_token(PUBLIC);
    t = Type();
    i = Identifier();
    jj_consume_token(LPAREN);
    fl = FormalList();
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACE);
    if (jj_2_7(5)) {
      vl = VarDeclList();
    } else {
      ;
    }
    if (jj_2_8(5)) {
      sl = StatementList();
    } else {
      ;
    }
    jj_consume_token(RETURN);
    e = Exp();
    jj_consume_token(SEMI);
    jj_consume_token(RBRACE);
        {if (true) return new MethodDecl(t, i, fl, vl, sl, e);}
    throw new Error("Missing return statement in function");
  }

// FormalList: Represents the parameter list of a method.
// Collects all formal parameters into a list
  static final public FormalList FormalList() throws ParseException {
    FormalList fl = new FormalList();
    Formal f;
    if (jj_2_10(5)) {
      f = Formal();
                       fl.addElement(f);
      label_4:
      while (true) {
        if (jj_2_9(5)) {
          ;
        } else {
          break label_4;
        }
        jj_consume_token(COMMA);
        f = Formal();
                                   fl.addElement(f);
      }
    } else {
      ;
    }
        {if (true) return fl;}
    throw new Error("Missing return statement in function");
  }

// Formal: Represents a single formal parameter in a method declaration.
// Contains the parameter's type and identifier
  static final public Formal Formal() throws ParseException {
    Type t;
    Identifier i;
    t = Type();
    i = Identifier();
        {if (true) return new Formal(t, i);}
    throw new Error("Missing return statement in function");
  }

// Type: Represents a type in MiniJava.
// Can be int[], boolean, int, or a class type
  static final public Type Type() throws ParseException {
    Identifier i;
    if (jj_2_11(5)) {
      jj_consume_token(INT);
      jj_consume_token(LBRACKET);
      jj_consume_token(RBRACKET);
                                  {if (true) return new IntArrayType();}
    } else if (jj_2_12(5)) {
      jj_consume_token(BOOLEAN);
                  {if (true) return new BooleanType();}
    } else if (jj_2_13(5)) {
      jj_consume_token(INT);
              {if (true) return new IntegerType();}
    } else if (jj_2_14(5)) {
      i = Identifier();
                         {if (true) return new IdentifierType(i.toString());}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// StatementList: Represents a list of statements.
// Collects all statements into a list
  static final public StatementList StatementList() throws ParseException {
    StatementList sl = new StatementList();
    Statement s;
    label_5:
    while (true) {
      s = Statement();
                          sl.addElement(s);
      if (jj_2_15(5)) {
        ;
      } else {
        break label_5;
      }
    }
        {if (true) return sl;}
    throw new Error("Missing return statement in function");
  }

// Statement: Represents different types of statements in MiniJava.
// Handles blocks, if-else, while loops, print statements, assignments, and array assignments
  static final public Statement Statement() throws ParseException {
    StatementList sl = new StatementList();
    Statement s;
    Exp e1, e2, e3;
    Identifier i;
    Statement s1, s2;
    if (jj_2_17(5)) {
      jj_consume_token(LBRACE);
      label_6:
      while (true) {
        if (jj_2_16(5)) {
          ;
        } else {
          break label_6;
        }
        s = Statement();
                          sl.addElement(s);
      }
      jj_consume_token(RBRACE);
      {if (true) return new Block(sl);}
    } else if (jj_2_18(5)) {
      jj_consume_token(IF);
      jj_consume_token(LPAREN);
      e1 = Exp();
      jj_consume_token(RPAREN);
      s1 = Statement();
      jj_consume_token(ELSE);
      s2 = Statement();
      {if (true) return new If(e1, s1, s2);}
    } else if (jj_2_19(5)) {
      jj_consume_token(WHILE);
      jj_consume_token(LPAREN);
      e1 = Exp();
      jj_consume_token(RPAREN);
      s1 = Statement();
      {if (true) return new While(e1, s1);}
    } else if (jj_2_20(5)) {
      jj_consume_token(PRINT);
      jj_consume_token(LPAREN);
      e1 = Exp();
      jj_consume_token(RPAREN);
      jj_consume_token(SEMI);
      {if (true) return new Print(e1);}
    } else if (jj_2_21(5)) {
      i = Identifier();
      jj_consume_token(ASSIGN);
      e1 = Exp();
      jj_consume_token(SEMI);
      {if (true) return new Assign(i, e1);}
    } else if (jj_2_22(5)) {
      i = Identifier();
      jj_consume_token(LBRACKET);
      e1 = Exp();
      jj_consume_token(RBRACKET);
      jj_consume_token(ASSIGN);
      e2 = Exp();
      jj_consume_token(SEMI);
      {if (true) return new ArrayAssign(i, e1, e2);}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// Exp: Represents expressions with AND operator.
// Handles logical AND operations between expressions
  static final public Exp Exp() throws ParseException {
    Exp e1, e2, e3;
    Identifier i;
    Type t;
    e1 = ExpAnd();
    label_7:
    while (true) {
      if (jj_2_23(5)) {
        ;
      } else {
        break label_7;
      }
      jj_consume_token(AND);
      e2 = ExpAnd();
                              e1 = new And(e1, e2);
    }
      {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

// ExpAnd: Represents expressions with LESS operator.
// Handles less than comparisons between expressions
  static final public Exp ExpAnd() throws ParseException {
    Exp e1, e2;
    e1 = ExpLess();
    label_8:
    while (true) {
      if (jj_2_24(5)) {
        ;
      } else {
        break label_8;
      }
      jj_consume_token(LESS);
      e2 = ExpLess();
                                e1 = new LessThan(e1, e2);
    }
      {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

// ExpLess: Represents expressions with addition and subtraction.
// Handles arithmetic addition and subtraction operations
  static final public Exp ExpLess() throws ParseException {
    Exp e1, e2;
    e1 = ExpPlus();
    label_9:
    while (true) {
      if (jj_2_25(5)) {
        ;
      } else {
        break label_9;
      }
      if (jj_2_26(5)) {
        jj_consume_token(ADD);
        e2 = ExpPlus();
                               e1 = new Plus(e1, e2);
      } else if (jj_2_27(5)) {
        jj_consume_token(SUB);
        e2 = ExpPlus();
                               e1 = new Minus(e1, e2);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

// ExpPlus: Represents expressions with multiplication and division.
// Handles arithmetic multiplication and division operations
  static final public Exp ExpPlus() throws ParseException {
    Exp e1, e2;
    e1 = ExpTimes();
    label_10:
    while (true) {
      if (jj_2_28(5)) {
        ;
      } else {
        break label_10;
      }
      if (jj_2_29(5)) {
        jj_consume_token(MULT);
        e2 = ExpTimes();
                                 e1 = new Times(e1, e2);
      } else if (jj_2_30(5)) {
        jj_consume_token(DIV);
        e2 = ExpTimes();
                                e1 = new Div(e1, e2);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

// ExpTimes: Represents expressions with array operations and method calls.
// Handles array length, method calls, and array lookups
  static final public Exp ExpTimes() throws ParseException {
    Exp e1, e2;
    Identifier i;
    ExpList el;
    e1 = ExpUnary();
    label_11:
    while (true) {
      if (jj_2_31(5)) {
        ;
      } else {
        break label_11;
      }
      if (jj_2_32(5)) {
        jj_consume_token(DOT);
        jj_consume_token(LENGTH);
                         e1 = new ArrayLength(e1);
      } else if (jj_2_33(5)) {
        jj_consume_token(DOT);
        i = Identifier();
        jj_consume_token(LPAREN);
        el = ExpList();
        jj_consume_token(RPAREN);
          e1 = new Call(e1, i, el);
      } else if (jj_2_34(5)) {
        jj_consume_token(LBRACKET);
        e2 = Exp();
        jj_consume_token(RBRACKET);
          e1 = new ArrayLookup(e1, e2);
      } else {
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
      {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

// ExpUnary: Represents unary expressions and atomic expressions.
// Handles not operator, new array, new object, this, boolean literals, identifiers, and numbers
  static final public Exp ExpUnary() throws ParseException {
    Exp e;
    Identifier i;
    Type t;
    if (jj_2_35(5)) {
      jj_consume_token(NOT);
      e = ExpUnary();
                           {if (true) return new Not(e);}
    } else if (jj_2_36(5)) {
      jj_consume_token(NEW);
      jj_consume_token(INT);
      jj_consume_token(LBRACKET);
      e = Exp();
      jj_consume_token(RBRACKET);
                                                  {if (true) return new NewArray(e);}
    } else if (jj_2_37(5)) {
      jj_consume_token(NEW);
      i = Identifier();
      jj_consume_token(LPAREN);
      jj_consume_token(RPAREN);
                                               {if (true) return new NewObject(i);}
    } else if (jj_2_38(5)) {
      jj_consume_token(THIS);
             {if (true) return new This();}
    } else if (jj_2_39(5)) {
      jj_consume_token(TRUE);
             {if (true) return new True();}
    } else if (jj_2_40(5)) {
      jj_consume_token(FALSE);
              {if (true) return new False();}
    } else if (jj_2_41(5)) {
      i = Identifier();
                       {if (true) return new IdentifierExp(i.toString());}
    } else if (jj_2_42(5)) {
      jj_consume_token(NUM);
            {if (true) return new IntegerLiteral(Integer.parseInt(token.image));}
    } else if (jj_2_43(5)) {
      jj_consume_token(LPAREN);
      e = Exp();
      jj_consume_token(RPAREN);
                                  {if (true) return e;}
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// ExpList: Represents a list of expressions.
// Used for method call arguments and array initializers
  static final public ExpList ExpList() throws ParseException {
    ExpList el = new ExpList();
    Exp e;
    if (jj_2_45(5)) {
      e = Exp();
                    el.addElement(e);
      label_12:
      while (true) {
        if (jj_2_44(5)) {
          ;
        } else {
          break label_12;
        }
        jj_consume_token(COMMA);
        e = Exp();
                                el.addElement(e);
      }
    } else {
      ;
    }
        {if (true) return el;}
    throw new Error("Missing return statement in function");
  }

// Identifier: Represents an identifier in the program.
// Creates an Identifier node from the token's image
  static final public Identifier Identifier() throws ParseException {
    Token t;
    t = jj_consume_token(IDENTIFIER);
        {if (true) return new Identifier(t.image);}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_2_8(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_8(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(7, xla); }
  }

  static private boolean jj_2_9(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_9(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(8, xla); }
  }

  static private boolean jj_2_10(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_10(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(9, xla); }
  }

  static private boolean jj_2_11(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_11(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(10, xla); }
  }

  static private boolean jj_2_12(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_12(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(11, xla); }
  }

  static private boolean jj_2_13(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_13(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(12, xla); }
  }

  static private boolean jj_2_14(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_14(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(13, xla); }
  }

  static private boolean jj_2_15(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_15(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(14, xla); }
  }

  static private boolean jj_2_16(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_16(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(15, xla); }
  }

  static private boolean jj_2_17(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_17(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(16, xla); }
  }

  static private boolean jj_2_18(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_18(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(17, xla); }
  }

  static private boolean jj_2_19(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_19(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(18, xla); }
  }

  static private boolean jj_2_20(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_20(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(19, xla); }
  }

  static private boolean jj_2_21(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_21(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(20, xla); }
  }

  static private boolean jj_2_22(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_22(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(21, xla); }
  }

  static private boolean jj_2_23(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_23(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(22, xla); }
  }

  static private boolean jj_2_24(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_24(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(23, xla); }
  }

  static private boolean jj_2_25(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_25(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(24, xla); }
  }

  static private boolean jj_2_26(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_26(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(25, xla); }
  }

  static private boolean jj_2_27(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_27(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(26, xla); }
  }

  static private boolean jj_2_28(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_28(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(27, xla); }
  }

  static private boolean jj_2_29(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_29(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(28, xla); }
  }

  static private boolean jj_2_30(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_30(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(29, xla); }
  }

  static private boolean jj_2_31(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_31(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(30, xla); }
  }

  static private boolean jj_2_32(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_32(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(31, xla); }
  }

  static private boolean jj_2_33(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_33(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(32, xla); }
  }

  static private boolean jj_2_34(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_34(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(33, xla); }
  }

  static private boolean jj_2_35(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_35(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(34, xla); }
  }

  static private boolean jj_2_36(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_36(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(35, xla); }
  }

  static private boolean jj_2_37(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_37(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(36, xla); }
  }

  static private boolean jj_2_38(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_38(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(37, xla); }
  }

  static private boolean jj_2_39(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_39(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(38, xla); }
  }

  static private boolean jj_2_40(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_40(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(39, xla); }
  }

  static private boolean jj_2_41(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_41(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(40, xla); }
  }

  static private boolean jj_2_42(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_42(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(41, xla); }
  }

  static private boolean jj_2_43(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_43(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(42, xla); }
  }

  static private boolean jj_2_44(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_44(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(43, xla); }
  }

  static private boolean jj_2_45(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_45(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(44, xla); }
  }

  static private boolean jj_3R_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_35()) {
    jj_scanpos = xsp;
    if (jj_3_36()) {
    jj_scanpos = xsp;
    if (jj_3_37()) {
    jj_scanpos = xsp;
    if (jj_3_38()) {
    jj_scanpos = xsp;
    if (jj_3_39()) {
    jj_scanpos = xsp;
    if (jj_3_40()) {
    jj_scanpos = xsp;
    if (jj_3_41()) {
    jj_scanpos = xsp;
    if (jj_3_42()) {
    jj_scanpos = xsp;
    if (jj_3_43()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_13() {
    if (jj_scan_token(CLASS)) return true;
    if (jj_3R_14()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_2()) jj_scanpos = xsp;
    if (jj_scan_token(LBRACE)) return true;
    xsp = jj_scanpos;
    if (jj_3_3()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) jj_scanpos = xsp;
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static private boolean jj_3_35() {
    if (jj_scan_token(NOT)) return true;
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3_22() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    if (jj_scan_token(ASSIGN)) return true;
    return false;
  }

  static private boolean jj_3_8() {
    if (jj_3R_19()) return true;
    return false;
  }

  static private boolean jj_3_21() {
    if (jj_3R_14()) return true;
    if (jj_scan_token(ASSIGN)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3_20() {
    if (jj_scan_token(PRINT)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  static private boolean jj_3_19() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_34() {
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3_33() {
    if (jj_scan_token(DOT)) return true;
    if (jj_3R_14()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_27()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3_18() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(RPAREN)) return true;
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(PUBLIC)) return true;
    if (jj_3R_29()) return true;
    if (jj_3R_14()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_30()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3_16() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_32()) {
    jj_scanpos = xsp;
    if (jj_3_33()) {
    jj_scanpos = xsp;
    if (jj_3_34()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3_32() {
    if (jj_scan_token(DOT)) return true;
    if (jj_scan_token(LENGTH)) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_3R_28()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_31()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_21() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_17()) {
    jj_scanpos = xsp;
    if (jj_3_18()) {
    jj_scanpos = xsp;
    if (jj_3_19()) {
    jj_scanpos = xsp;
    if (jj_3_20()) {
    jj_scanpos = xsp;
    if (jj_3_21()) {
    jj_scanpos = xsp;
    if (jj_3_22()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3_17() {
    if (jj_scan_token(LBRACE)) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_16()) { jj_scanpos = xsp; break; }
    }
    if (jj_scan_token(RBRACE)) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_18()) return true;
    return false;
  }

  static private boolean jj_3_30() {
    if (jj_scan_token(DIV)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3_28() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_29()) {
    jj_scanpos = xsp;
    if (jj_3_30()) return true;
    }
    return false;
  }

  static private boolean jj_3_29() {
    if (jj_scan_token(MULT)) return true;
    if (jj_3R_26()) return true;
    return false;
  }

  static private boolean jj_3R_16() {
    Token xsp;
    if (jj_3_6()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_6()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_13()) return true;
    return false;
  }

  static private boolean jj_3_15() {
    if (jj_3R_21()) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_3R_26()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_28()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_19() {
    Token xsp;
    if (jj_3_15()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_15()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_27() {
    if (jj_scan_token(SUB)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_29()) return true;
    if (jj_3R_14()) return true;
    if (jj_scan_token(SEMI)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_25() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_26()) {
    jj_scanpos = xsp;
    if (jj_3_27()) return true;
    }
    return false;
  }

  static private boolean jj_3_26() {
    if (jj_scan_token(ADD)) return true;
    if (jj_3R_25()) return true;
    return false;
  }

  static private boolean jj_3_14() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_13() {
    if (jj_scan_token(INT)) return true;
    return false;
  }

  static private boolean jj_3_12() {
    if (jj_scan_token(BOOLEAN)) return true;
    return false;
  }

  static private boolean jj_3R_29() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_11()) {
    jj_scanpos = xsp;
    if (jj_3_12()) {
    jj_scanpos = xsp;
    if (jj_3_13()) {
    jj_scanpos = xsp;
    if (jj_3_14()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3_11() {
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_3R_24() {
    if (jj_3R_25()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_25()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_44() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_17()) return true;
    return false;
  }

  static private boolean jj_3_45() {
    if (jj_3R_22()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_44()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_24() {
    if (jj_scan_token(LESS)) return true;
    if (jj_3R_24()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    Token xsp;
    if (jj_3_5()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_5()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_27() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_45()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_3R_29()) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_3R_24()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_24()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_9() {
    if (jj_scan_token(COMMA)) return true;
    if (jj_3R_20()) return true;
    return false;
  }

  static private boolean jj_3_23() {
    if (jj_scan_token(AND)) return true;
    if (jj_3R_23()) return true;
    return false;
  }

  static private boolean jj_3_43() {
    if (jj_scan_token(LPAREN)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3_42() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_16()) return true;
    return false;
  }

  static private boolean jj_3_10() {
    if (jj_3R_20()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_9()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_41() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    if (jj_3R_23()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_23()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_40() {
    if (jj_scan_token(FALSE)) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_10()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3_39() {
    if (jj_scan_token(TRUE)) return true;
    return false;
  }

  static private boolean jj_3_38() {
    if (jj_scan_token(THIS)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_scan_token(EXTENDS)) return true;
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_3_37() {
    if (jj_scan_token(NEW)) return true;
    if (jj_3R_14()) return true;
    if (jj_scan_token(LPAREN)) return true;
    if (jj_scan_token(RPAREN)) return true;
    return false;
  }

  static private boolean jj_3_36() {
    if (jj_scan_token(NEW)) return true;
    if (jj_scan_token(INT)) return true;
    if (jj_scan_token(LBRACKET)) return true;
    if (jj_3R_22()) return true;
    if (jj_scan_token(RBRACKET)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MiniJavaTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  /** Whether we are looking ahead. */
  static private boolean jj_lookingAhead = false;
  static private boolean jj_semLA;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[0];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[45];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public MiniJava(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MiniJava(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MiniJavaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public MiniJava(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new MiniJavaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public MiniJava(MiniJavaTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(MiniJavaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 0; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[53];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 0; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 53; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 45; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
            case 7: jj_3_8(); break;
            case 8: jj_3_9(); break;
            case 9: jj_3_10(); break;
            case 10: jj_3_11(); break;
            case 11: jj_3_12(); break;
            case 12: jj_3_13(); break;
            case 13: jj_3_14(); break;
            case 14: jj_3_15(); break;
            case 15: jj_3_16(); break;
            case 16: jj_3_17(); break;
            case 17: jj_3_18(); break;
            case 18: jj_3_19(); break;
            case 19: jj_3_20(); break;
            case 20: jj_3_21(); break;
            case 21: jj_3_22(); break;
            case 22: jj_3_23(); break;
            case 23: jj_3_24(); break;
            case 24: jj_3_25(); break;
            case 25: jj_3_26(); break;
            case 26: jj_3_27(); break;
            case 27: jj_3_28(); break;
            case 28: jj_3_29(); break;
            case 29: jj_3_30(); break;
            case 30: jj_3_31(); break;
            case 31: jj_3_32(); break;
            case 32: jj_3_33(); break;
            case 33: jj_3_34(); break;
            case 34: jj_3_35(); break;
            case 35: jj_3_36(); break;
            case 36: jj_3_37(); break;
            case 37: jj_3_38(); break;
            case 38: jj_3_39(); break;
            case 39: jj_3_40(); break;
            case 40: jj_3_41(); break;
            case 41: jj_3_42(); break;
            case 42: jj_3_43(); break;
            case 43: jj_3_44(); break;
            case 44: jj_3_45(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
